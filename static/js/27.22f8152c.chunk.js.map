{"version":3,"sources":["hooks/useResizeObserver.js","../node_modules/d3-selection/src/mouse.js","../node_modules/d3-selection/src/sourceEvent.js","../node_modules/d3-selection/src/point.js","components/Timeseries.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","node","event","source","sourceEvent","changedTouches","svg","ownerSVGElement","createSVGPoint","point","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","rect","getBoundingClientRect","left","clientLeft","top","clientTop","margin","React","memo","timeseries","dates","chartType","isUniform","isLog","t","useTranslation","refs","useRef","wrapperRef","highlightedDate","setHighlightedDate","length","getBarWidth","useCallback","T","axisWidth","width","Math","min","height","chartRight","chartBottom","barWidth","xScale","scaleTime","clamp","domain","parseIndiaDate","range","numTicksX","xAxis","g","attr","call","axisBottom","ticks","tickFormat","date","formatDate","xAxis2","yScale","tickValues","tickSize","select","style","yAxis","axisRight","num","formatNumber","tickPadding","uniformScaleMin","getStatistic","uniformScaleMax","max","yScaleUniformLinear","scaleLinear","nice","yScaleUniformLog","scaleLog","mousemove","xm","mouse","this","invert","isNaN","bisectDate","bisector","dateLeft","dateRight","mouseout","i","transition","duration","D3_TRANSITION_DURATION","statistic","TIMESERIES_STATISTICS","generateYScale","color","STATISTIC_CONFIGS","selectAll","data","join","enter","append","remove","pathLength","linePath","line","curve","curveMonotoneX","getTotalLength","update","attrTween","previous","interpolatePath","on","getStatisticDelta","currCount","prevDate","findIndex","trail","useMemo","styles","map","element","push","animationDelay","Fragment","className","delta","statisticConfig","key","classnames","capitalize","displayName","format","preserveAspectRatio","prevProps","currProps","equal","regionHighlighted","stateCode","districtName"],"mappings":"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","file":"static/js/27.22f8152c.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import sourceEvent from \"./sourceEvent\";\nimport point from \"./point\";\n\nexport default function(node) {\n  var event = sourceEvent();\n  if (event.changedTouches) event = event.changedTouches[0];\n  return point(node, event);\n}\n","import {event} from \"./selection/on\";\n\nexport default function() {\n  var current = event, source;\n  while (source = current.sourceEvent) current = source;\n  return current;\n}\n","export default function(node, event) {\n  var svg = node.ownerSVGElement || node;\n\n  if (svg.createSVGPoint) {\n    var point = svg.createSVGPoint();\n    point.x = event.clientX, point.y = event.clientY;\n    point = point.matrixTransform(node.getScreenCTM().inverse());\n    return [point.x, point.y];\n  }\n\n  var rect = node.getBoundingClientRect();\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n}\n","import {\n  D3_TRANSITION_DURATION,\n  STATISTIC_CONFIGS,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useResizeObserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max, bisector} from 'd3-array';\nimport {axisBottom, axisRight} from 'd3-axis';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear, scaleLog} from 'd3-scale';\nimport {select, mouse} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useEffect, useRef, useMemo, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\n// Chart margins\nconst margin = {top: 15, right: 35, bottom: 25, left: 25};\n\nfunction Timeseries({timeseries, dates, chartType, isUniform, isLog}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  const getBarWidth = useCallback(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width} = dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    // Bar widths\n    const axisWidth = chartRight - margin.left;\n    return Math.min(4, axisWidth / (1.25 * T));\n  }, [dates.length, dimensions]);\n\n  useEffect(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const barWidth = getBarWidth();\n\n    // Buffer space along y-axis\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : [])\n      .range([margin.left, chartRight]);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => formatDate(date, 'dd MMM'))\n      );\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) =>\n      g.attr('class', 'y-axis').call(\n        axisRight(yScale)\n          .ticks(4)\n          .tickFormat((num) => formatNumber(num, 'short'))\n          .tickPadding(4)\n      );\n\n    const uniformScaleMin = min(dates, (date) =>\n      getStatistic(timeseries[date], chartType, 'active')\n    );\n\n    const uniformScaleMax = max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], chartType, 'confirmed'),\n        getStatistic(timeseries[date], chartType, 'recovered'),\n        getStatistic(timeseries[date], chartType, 'deceased')\n      )\n    );\n\n    const yScaleUniformLinear = scaleLinear()\n      .clamp(true)\n      .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const yScaleUniformLog = scaleLog()\n      .clamp(true)\n      .domain([\n        Math.max(1, uniformScaleMin),\n        Math.max(10, yBufferTop * uniformScaleMax),\n      ])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const generateYScale = (statistic) => {\n      if (isUniform && chartType === 'total' && isLog && statistic !== 'tested')\n        return yScaleUniformLog;\n\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n\n      if (chartType === 'total' && isLog)\n        return scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(\n              1,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n            Math.max(\n              10,\n              yBufferTop *\n                max(dates, (date) =>\n                  getStatistic(timeseries[date], chartType, statistic)\n                )\n            ),\n          ])\n          .nice(4)\n          .range([chartBottom, margin.top]);\n\n      return scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              max(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = mouse(this)[0];\n      const date = xScale.invert(xm);\n      if (!isNaN(date)) {\n        const bisectDate = bisector((date) => parseIndiaDate(date)).left;\n        const index = bisectDate(dates, date, 1);\n        const dateLeft = dates[index - 1];\n        const dateRight = dates[index];\n        setHighlightedDate(\n          date - parseIndiaDate(dateLeft) < parseIndiaDate(dateRight) - date\n            ? dateLeft\n            : dateRight\n        );\n      }\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n      /* Path dots */\n      svg\n        .selectAll('circle')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('cy', chartBottom)\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n            .attr('r', barWidth / 2)\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(getStatistic(timeseries[date], chartType, statistic))\n        );\n\n      if (chartType === 'total') {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        const linePath = line()\n          .curve(curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y((date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n\n        let pathLength;\n\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', linePath)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = select(this).attr('d');\n                  const current = linePath(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        svg\n          .selectAll('.stem')\n          .data(dates, (date) => date)\n          .join((enter) =>\n            enter\n              .append('line')\n              .attr('class', 'stem')\n              .attr('stroke-width', barWidth)\n              .attr('x1', (date) => xScale(parseIndiaDate(date)))\n              .attr('y1', chartBottom)\n              .attr('x2', (date) => xScale(parseIndiaDate(date)))\n              .attr('y2', chartBottom)\n          )\n          .transition(t)\n          .attr('stroke-width', barWidth)\n          .attr('x1', (date) => xScale(parseIndiaDate(date)))\n          .attr('y1', yScale(0))\n          .attr('x2', (date) => xScale(parseIndiaDate(date)))\n          .attr('y2', (date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, getBarWidth, isUniform, isLog, timeseries, dates]);\n\n  useEffect(() => {\n    const barWidth = getBarWidth();\n    refs.current.forEach((ref) => {\n      const svg = select(ref);\n      svg\n        .selectAll('circle')\n        .attr('r', (date) =>\n          date === highlightedDate ? barWidth : barWidth / 2\n        );\n    });\n  }, [highlightedDate, getBarWidth]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n      const currCount = getStatistic(\n        timeseries?.[highlightedDate],\n        chartType,\n        statistic\n      );\n      const prevDate =\n        dates[dates.findIndex((date) => date === highlightedDate) - 1];\n\n      const prevCount = getStatistic(\n        timeseries?.[prevDate],\n        chartType,\n        statistic\n      );\n      return currCount - prevCount;\n    },\n    [timeseries, dates, highlightedDate, chartType]\n  );\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Timeseries\">\n        {TIMESERIES_STATISTICS.map((statistic, index) => {\n          const delta = getStatisticDelta(statistic, index);\n          const statisticConfig = STATISTIC_CONFIGS[statistic];\n          return (\n            <div\n              key={statistic}\n              className={classnames('svg-parent fadeInUp', `is-${statistic}`)}\n              ref={wrapperRef}\n              style={trail[index]}\n            >\n              {highlightedDate && (\n                <div className={classnames('stats', `is-${statistic}`)}>\n                  <h5 className=\"title\">\n                    {t(capitalize(statisticConfig.displayName))}\n                  </h5>\n                  <h5 className=\"title\">\n                    {formatDate(highlightedDate, 'dd MMMM')}\n                  </h5>\n                  <div className=\"stats-bottom\">\n                    <h2>\n                      {formatNumber(\n                        getStatistic(\n                          timeseries?.[highlightedDate],\n                          chartType,\n                          statistic\n                        ),\n                        statisticConfig.format !== 'short'\n                          ? statisticConfig.format\n                          : 'int',\n                        statistic\n                      )}\n                    </h2>\n                    <h6>{`${delta > 0 ? '+' : ''}${formatNumber(\n                      delta,\n                      statisticConfig.format !== 'short'\n                        ? statisticConfig.format\n                        : 'int',\n                      statistic\n                    )}`}</h6>\n                  </div>\n                </div>\n              )}\n              <svg\n                ref={(element) => {\n                  refs.current[index] = element;\n                }}\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                <g className=\"x-axis\" />\n                <g className=\"x-axis2\" />\n                <g className=\"y-axis\" />\n              </svg>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  } else if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Timeseries, isEqual);\n"],"sourceRoot":""}